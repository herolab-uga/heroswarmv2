// Generated by gencpp from file robot_msgs/Environment.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_ENVIRONMENT_H
#define ROBOT_MSGS_MESSAGE_ENVIRONMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct Environment_
{
  typedef Environment_<ContainerAllocator> Type;

  Environment_()
    : temp(0.0)
    , pressure(0.0)
    , humidity(0.0)
    , altitude(0.0)  {
    }
  Environment_(const ContainerAllocator& _alloc)
    : temp(0.0)
    , pressure(0.0)
    , humidity(0.0)
    , altitude(0.0)  {
  (void)_alloc;
    }



   typedef double _temp_type;
  _temp_type temp;

   typedef double _pressure_type;
  _pressure_type pressure;

   typedef double _humidity_type;
  _humidity_type humidity;

   typedef double _altitude_type;
  _altitude_type altitude;





  typedef boost::shared_ptr< ::robot_msgs::Environment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::Environment_<ContainerAllocator> const> ConstPtr;

}; // struct Environment_

typedef ::robot_msgs::Environment_<std::allocator<void> > Environment;

typedef boost::shared_ptr< ::robot_msgs::Environment > EnvironmentPtr;
typedef boost::shared_ptr< ::robot_msgs::Environment const> EnvironmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::Environment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::Environment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::Environment_<ContainerAllocator1> & lhs, const ::robot_msgs::Environment_<ContainerAllocator2> & rhs)
{
  return lhs.temp == rhs.temp &&
    lhs.pressure == rhs.pressure &&
    lhs.humidity == rhs.humidity &&
    lhs.altitude == rhs.altitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::Environment_<ContainerAllocator1> & lhs, const ::robot_msgs::Environment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::Environment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::Environment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::Environment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::Environment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::Environment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::Environment_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1a388ffb9d45c754fa291d8040a937d";
  }

  static const char* value(const ::robot_msgs::Environment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf1a388ffb9d45c75ULL;
  static const uint64_t static_value2 = 0x4fa291d8040a937dULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/Environment";
  }

  static const char* value(const ::robot_msgs::Environment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 temp\n"
"float64 pressure\n"
"float64 humidity\n"
"float64 altitude\n"
;
  }

  static const char* value(const ::robot_msgs::Environment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::Environment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temp);
      stream.next(m.pressure);
      stream.next(m.humidity);
      stream.next(m.altitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Environment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::Environment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::Environment_<ContainerAllocator>& v)
  {
    s << indent << "temp: ";
    Printer<double>::stream(s, indent + "  ", v.temp);
    s << indent << "pressure: ";
    Printer<double>::stream(s, indent + "  ", v.pressure);
    s << indent << "humidity: ";
    Printer<double>::stream(s, indent + "  ", v.humidity);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_ENVIRONMENT_H
