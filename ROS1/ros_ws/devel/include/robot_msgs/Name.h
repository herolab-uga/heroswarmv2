// Generated by gencpp from file robot_msgs/Name.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_NAME_H
#define ROBOT_MSGS_MESSAGE_NAME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/UInt64.h>

namespace robot_msgs
{
template <class ContainerAllocator>
struct Name_
{
  typedef Name_<ContainerAllocator> Type;

  Name_()
    : name()
    , time()  {
    }
  Name_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , time(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _name_type;
  _name_type name;

   typedef  ::std_msgs::UInt64_<ContainerAllocator>  _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::robot_msgs::Name_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::Name_<ContainerAllocator> const> ConstPtr;

}; // struct Name_

typedef ::robot_msgs::Name_<std::allocator<void> > Name;

typedef boost::shared_ptr< ::robot_msgs::Name > NamePtr;
typedef boost::shared_ptr< ::robot_msgs::Name const> NameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::Name_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::Name_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::Name_<ContainerAllocator1> & lhs, const ::robot_msgs::Name_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::Name_<ContainerAllocator1> & lhs, const ::robot_msgs::Name_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::Name_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::Name_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::Name_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::Name_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::Name_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::Name_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::Name_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f8b4d9de593bc07202bdba9902cdb0a6";
  }

  static const char* value(const ::robot_msgs::Name_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf8b4d9de593bc072ULL;
  static const uint64_t static_value2 = 0x02bdba9902cdb0a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::Name_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/Name";
  }

  static const char* value(const ::robot_msgs::Name_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::Name_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String name\n"
"std_msgs/UInt64 time\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt64\n"
"uint64 data\n"
;
  }

  static const char* value(const ::robot_msgs::Name_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::Name_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Name_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::Name_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::Name_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.name);
    s << indent << "time: ";
    s << std::endl;
    Printer< ::std_msgs::UInt64_<ContainerAllocator> >::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_NAME_H
